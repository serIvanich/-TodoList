{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","onClickAddItem","trimmedTitle","trim","addItem","TextField","size","variant","value","onChange","e","currentTarget","onKeyPress","key","label","helperText","onBlur","IconButton","onClick","color","AddBox","EditableSpan","editMode","setEditMode","autoFocus","changeTitle","onDoubleClick","TodoList","filter","tasks","map","t","id","className","isDone","Checkbox","checked","changeTaskStatus","todoListID","newTitle","changeTaskTitle","removeTask","style","changeTodoListTitle","removeTodoList","addTask","listStyle","paddingLeft","Button","changeFilter","marginLeft","App","todoListID_1","v1","todoListID_2","todoLists","setTodoLists","setTasks","taskID","newTask","newIsDoneValue","tl","getTasksForTodoList","todoList","console","log","todoListComponents","Grid","item","Paper","elevation","padding","borderRadius","AppBar","position","Toolbar","justifyContent","Menu","Typography","Container","fixed","container","newTodoListID","newTodoList","spacing","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.d251eb94.chunk.js","sourcesContent":["import React, {useState, KeyboardEvent, ChangeEvent} from 'react'\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nfunction AddItemForm(props: AddItemFormPropsType) {\r\n    const [title, setTitle] = useState<string>('')\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError(false)\r\n    }\r\n    const onClickAddItem = () => {\r\n        const trimmedTitle = title.trim()\r\n        if (trimmedTitle) {\r\n            props.addItem(trimmedTitle)\r\n        } else {\r\n            setError(true)\r\n        }\r\n\r\n        setTitle('')\r\n    }\r\n    const onKeyPressAddItem = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            onClickAddItem()\r\n        }\r\n    }\r\n    // const errorMessage = error\r\n    //     ? <div style={{color: 'red'}}>'text is required'</div>\r\n    //     : null\r\n\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                size={\"small\"}\r\n                variant={\"outlined\"}\r\n                error={error}\r\n                value={title}\r\n                onChange={onChangeTitle}\r\n                onKeyPress={onKeyPressAddItem}\r\n                label={'title'}\r\n                helperText={error && 'title is required'}\r\n                onBlur={() => setError(false)}\r\n            />\r\n\r\n\r\n            {/*<input className={error ? 'error' : ''}*/}\r\n            {/*       value={title}*/}\r\n            {/*       onChange={onChangeTitle}*/}\r\n            {/*       onKeyPress={onKeyPressAddItem}/>*/}\r\n            {/*<button onClick={onClickAddItem}>+</button>*/}\r\n            <IconButton onClick={onClickAddItem} color={\"primary\"}>\r\n\r\n                <AddBox/>\r\n            </IconButton>\r\n            {/*{errorMessage}*/}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default AddItemForm","import React, {useState, KeyboardEvent, ChangeEvent} from 'react'\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (newTitle: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n\r\n    const [title, setTitle] = useState(props.title)\r\n    const [editMode, setEditMode] = useState(false)\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n        // setTitle(props.title)\r\n    }\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeTitle(title)\r\n    }\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n\r\n\r\n    }\r\n\r\n    return (\r\n        editMode\r\n\r\n            ? <TextField\r\n\r\n                color={\"primary\"}\r\n                value={title}\r\n                autoFocus\r\n                onChange={onChangeTitle}\r\n                onBlur={offEditMode}\r\n\r\n            />\r\n\r\n            // ? <input\r\n            //     value={title}\r\n            //     autoFocus\r\n            //     onChange={onChangeTitle}\r\n            //     onBlur={offEditMode}\r\n            //\r\n            // />\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n}","import React, {ChangeEvent} from 'react'\r\nimport {FilterValuesType, TaskType} from './App'\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined';\r\n\r\n\r\ntype TodoListPropsType = {\r\n    todoListID: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: FilterValuesType\r\n    removeTask: (taskID: string, todoListID: string) => void\r\n    changeFilter: (value: FilterValuesType, todoListID: string) => void\r\n    addTask: (title: string, todoListID: string) => void\r\n    changeTaskStatus: (taskID: string, newIsDoneValue: boolean, todoListID: string) => void\r\n    removeTodoList: (todoListID: string) => void\r\n    changeTaskTitle: (taskID: string, title: string, todoListID: string) => void\r\n    changeTodoListTitle: (title: string, todoListID: string) => void\r\n\r\n}\r\n\r\nexport const TodoList: React.FC<TodoListPropsType> = (props) => {\r\n    const {filter} = props\r\n    // const [title, setTitle] = useState<string>('')\r\n    // const [error, setError] = useState<boolean>(false)\r\n    const tasks = props.tasks.map(t => {\r\n        const removeTask = () => props.removeTask(t.id, props.todoListID)\r\n        const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n            props.changeTaskStatus(t.id, e.currentTarget.checked, props.todoListID)\r\n        }\r\n        const changeTaskTitle = (newTitle: string)=> {\r\n            props.changeTaskTitle(t.id, newTitle, props.todoListID)\r\n        }\r\n\r\n\r\n        return (\r\n            <li  key={t.id}>\r\n                <span className={t.isDone ? 'is-done' : ''}>\r\n                    <Checkbox\r\n                        color={\"primary\"}\r\n                        checked={t.isDone}\r\n                        onChange={changeTaskStatus}\r\n                    />\r\n                </span>\r\n\r\n                {/*<input*/}\r\n                {/*    onChange={changeTaskStatus}*/}\r\n                {/*    type='checkbox'*/}\r\n                {/*    checked={t.isDone}/>*/}\r\n                {/*/!*<span>{t.title}</span>*!/*/}\r\n                <EditableSpan title={t.title} changeTitle={changeTaskTitle}/>\r\n                {/*<button onClick={removeTask}>x</button>*/}\r\n                <IconButton onClick={removeTask} style={{color: 'maroon'}}>\r\n                    <DeleteOutlinedIcon />\r\n                </IconButton>\r\n\r\n            </li>)\r\n    })\r\n\r\n    const onClickTodoList = () => props.removeTodoList(props.todoListID)\r\n\r\n\r\n    const addTask = (title: string) => props.addTask(title, props.todoListID)\r\n    const changeTodoListTitle = (title: string) => props.changeTodoListTitle(title, props.todoListID)\r\n\r\n\r\n    // @ts-ignore\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={props.title} changeTitle={changeTodoListTitle}/>\r\n                {/*<button onClick={onClickTodoList}>x</button>*/}\r\n                <IconButton onClick={onClickTodoList} style={{color: 'maroon'}}>\r\n                    <DeleteOutlinedIcon />\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n\r\n            <ul style={{listStyle:\"none\", paddingLeft: '0px'}}>\r\n                {tasks}\r\n            </ul>\r\n            <div>\r\n                <Button\r\n\r\n                    size={\"small\"}\r\n                    variant={filter === 'all' ? \"contained\" : \"outlined\"}\r\n                    color={'primary'}\r\n\r\n                        onClick={() => props.changeFilter('all', props.todoListID)}>All\r\n                </Button>\r\n                <Button\r\n                    style={{marginLeft: '3px'}}\r\n                    size={\"small\"}\r\n                    variant={filter === 'active' ? \"contained\" : \"outlined\"}\r\n                    color={'primary'}\r\n                    // className={filter === 'active' ? 'active-filter' : ''}\r\n                        onClick={() => props.changeFilter('active', props.todoListID)}>Active\r\n                </Button>\r\n                <Button\r\n                    style={{marginLeft: '3px'}}\r\n                    size={\"small\"}\r\n                    variant={filter === 'completed' ? \"contained\" : \"outlined\"}\r\n                    color={'primary'}\r\n                    // className={filter === 'completed' ? 'active-filter' : ''}\r\n                        onClick={() => props.changeFilter('completed', props.todoListID)}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n","import React, {useState} from 'react'\r\nimport './App.css'\r\nimport {TodoList} from \"./TodoList\"\r\nimport {v1} from 'uuid'\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\ntype TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\ntype TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n    //BLL\r\n    const todoListID_1 = v1()\r\n    const todoListID_2 = v1()\r\n    const [todoLists, setTodoLists] = useState<Array<TodoListType>>([\r\n        {id: todoListID_1, title: 'What to learn', filter: 'all'},\r\n        {id: todoListID_2, title: 'What to buy', filter: 'all'},\r\n    ])\r\n\r\n\r\n    const [tasks, setTasks] = useState<TaskStateType>({\r\n        [todoListID_1]: [\r\n            {id: v1(), title: 'HTML', isDone: true},\r\n            {id: v1(), title: 'CSS', isDone: true},\r\n            {id: v1(), title: 'React', isDone: false},\r\n            {id: v1(), title: 'JavaScript', isDone: true},\r\n        ],\r\n        [todoListID_2]: [\r\n            {id: v1(), title: 'Milk', isDone: true},\r\n            {id: v1(), title: 'Meat', isDone: true},\r\n            {id: v1(), title: 'Bread', isDone: false},\r\n        ],\r\n    })\r\n\r\n    const [filter, setFilter] = useState<FilterValuesType>('active')\r\n\r\n\r\n    function removeTask(taskID: string, todoListID: string) {\r\n        // tasks[todoListID] = tasks[todoListID].filter(t => t.id !== taskID)\r\n        // setTasks({...tasks})\r\n        setTasks({...tasks, [todoListID]: tasks[todoListID].filter(t => t.id !== taskID)})\r\n    }\r\n\r\n    function addTask(title: string, todoListID: string) {\r\n        const newTask: TaskType = {\r\n            id: v1(),\r\n            title: title,\r\n            isDone: false\r\n        }\r\n        setTasks({...tasks, [todoListID]: [newTask, ...tasks[todoListID]]})\r\n    }\r\n\r\n    function changeTaskStatus(taskID: string, newIsDoneValue: boolean, todoListID: string) {\r\n        // tasks[todoListID] = tasks[todoListID].map(t => t.id === taskID ? {...t, isDone: newIsDoneValue} : t)\r\n        setTasks({\r\n            ...tasks,\r\n            [todoListID]: tasks[todoListID].map(t => t.id === taskID ? {...t, isDone: newIsDoneValue} : t)\r\n        })\r\n    }\r\n\r\n    function changeTaskTitle(taskID: string, newTitle: string, todoListID: string) {\r\n        setTasks({\r\n            ...tasks,\r\n            [todoListID]: tasks[todoListID].map(t => t.id === taskID ? {...t, title: newTitle} : t)\r\n        })\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, todoListID: string) {\r\n        setTodoLists(todoLists.map(tl => tl.id === todoListID ? {...tl, filter: value} : tl))\r\n\r\n    }\r\n\r\n    function changeTodoListTitle(title: string, todoListID: string) {\r\n        setTodoLists(todoLists.map(tl => tl.id === todoListID ? {...tl, title: title} : tl))\r\n\r\n    }\r\n\r\n    function removeTodoList(todoListID: string) {\r\n        setTodoLists(todoLists.filter(tl => tl.id !== todoListID))\r\n        delete tasks[todoListID]\r\n    }\r\n\r\n    function addTodoList(title: string) {\r\n        const newTodoListID = v1()\r\n        const newTodoList: TodoListType = {id: newTodoListID, title, filter: 'all'}\r\n        setTodoLists([...todoLists, newTodoList])\r\n        setTasks({...tasks, [newTodoListID]: []})\r\n    }\r\n\r\n\r\n    //UI\r\n\r\n    function getTasksForTodoList(todoList: TodoListType) {\r\n\r\n\r\n        switch (todoList.filter) {\r\n\r\n\r\n            case 'active':\r\n                return tasks[todoList.id].filter(t => !t.isDone)\r\n\r\n            case 'completed':\r\n                return tasks[todoList.id].filter(t => t.isDone === true)\r\n            default:\r\n                return tasks[todoList.id]\r\n\r\n\r\n        }\r\n    }\r\n\r\n    console.log(tasks)\r\n    const todoListComponents = todoLists.map(tl => {\r\n        return (\r\n            <Grid item key={tl.id}>\r\n                <Paper elevation={7} style={{padding: '20px', borderRadius: '5px'}}>\r\n                    <TodoList\r\n\r\n                        todoListID={tl.id}\r\n                        title={tl.title}\r\n                        tasks={getTasksForTodoList(tl)}\r\n                        filter={tl.filter}\r\n                        removeTask={removeTask}\r\n                        changeFilter={changeFilter}\r\n                        addTask={addTask}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        removeTodoList={removeTodoList}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                        changeTodoListTitle={changeTodoListTitle}\r\n                    />\r\n\r\n                </Paper>\r\n            </Grid>\r\n        )\r\n    })\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position={'static'}>\r\n                <Toolbar style={{justifyContent: 'space-between'}}>\r\n                    <IconButton color={'inherit'}>\r\n                        <Menu/>\r\n\r\n                    </IconButton>\r\n                    <Typography variant={'h5'}>\r\n                        Todolists\r\n                    </Typography>\r\n                    <Button\r\n                        color={'inherit'}\r\n                        variant={\"outlined\"}>\r\n                        Login\r\n                    </Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '20px 0'}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {todoListComponents}\r\n                </Grid>\r\n\r\n\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}